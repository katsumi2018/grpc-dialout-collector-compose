[agent]

  interval = "10s"			# データの収集間隔を設定 (例: 10秒ごと)
  round_interval = true		# [true] の場合、収集時間を指定の間隔の区切りに揃える (例: 10秒間隔なら 00秒, 10秒, 20秒...)
  metric_batch_size = 1000	# Output プラグインへ送信する際のメトリクスのバッチサイズを設定 (一度に送信するメトリクスの数)
  metric_buffer_limit = 10000	# メトリクスを一時的に保存するバッファのメモリ上限値を設定 (これを超えると古いデータから破棄)
  collection_jitter = "0s"	# メトリクス収集処理の開始時間にランダムな遅延を追加 (設定値の範囲内で各プラグインがスリープ)
  flush_interval = "10s"	# Output プラグインへデータを送信する間隔を設定 (例: 10秒ごと)
  flush_jitter = "0s"		# データ送信処理の開始時間にランダムな遅延を追加 (flush_interval と flush_jitter の合計以下のランダムな時間で送信)
  precision = "0s"		# メトリクスのタイムスタンプの精度を設定 (例: "1ms", "1s")

  # デバッグ時に有効にする (コメントアウトを外すと有効)
  #debug = true
  #logfile = "/var/log/telegraf/telegraf.log" # ログファイルの出力先パス

# ------------------------------------------------------------------------------------------------------------------------
# pmtelemetryd で保存されたテレメトリーデータファイルを解析し、特定のフィールドとタグを抽出
# ------------------------------------------------------------------------------------------------------------------------

[[inputs.tail]]
  files = ["/path/to/spool/telemetry-data.txt"] # 監視するファイルのパスを指定
  initial_read_offset = "end" # ファイルの読み込み開始位置を設定 ("beginning" または "end")。ここではファイルの末尾から読み込み
  watch_method = "inotify" # ファイルの変更を監視する方法を指定 (inotify は Linux カーネルの機能を利用)
  data_format = "json_v2" # 読み込むデータの形式を JSON (バージョン 2) として指定


  ## ルートオブジェクトの解析設定
  [[inputs.tail.json_v2]]
    measurement_name = "telemetrys" # 生成するメトリクスの measurement 名を設定

    [[inputs.tail.json_v2.field]]
      path = "telemetry_data.*/in-octets" # JSON データ内の "telemetry_data" 配下のすべての要素にある "in-octets" フィールドを抽出
      rename = "in_octets" # 抽出したフィールドの名前を "in_octets" に変更
      type = "int" # 抽出したフィールドのデータ型を整数型として扱う
      optional = true # 指定したパスのフィールドが存在しない場合でもエラーにしないように設定

    [[inputs.tail.json_v2.field]]
      path = "telemetry_data.*/out-octets" # JSON データ内の "telemetry_data" 配下のすべての要素にある "out-octets" フィールドを抽出
      rename = "out_octets" # 抽出したフィールドの名前を "out_octets" に変更
      type = "int" # 抽出したフィールドのデータ型を整数型として扱う
      optional = true # 指定したパスのフィールドが存在しない場合でもエラーにしないように設定


    [[inputs.tail.json_v2.tag]]
      path = "telemetry_node" # JSON データ内の "telemetry_node" フィールドをタグとして抽出
      rename = "host_ip" # 抽出したタグの名前を "host_ip" に変更

    [[inputs.tail.json_v2.tag]]
      path = "telemetry_data.sensor_path.1.filters.name" # JSON データ内のネストしたパスにある "name" フィールドをタグとして抽出
      rename = "if_name" # 抽出したタグの名前を "if_name" に変更

## デバッグ用 (コメントアウトを外すと有効になり、処理されたメトリクスがファイルに出力)
#[[outputs.file]]
#  files = ["/var/log/telegraf/metrics.json"]
#  data_format = "json"

# ------------------------------------------------------------------------------------------------------------------------
# Prometheus と連携するための設定
# ------------------------------------------------------------------------------------------------------------------------

[[outputs.prometheus_client]]
  listen = ":9091" # Prometheus がメトリクスを収集するためのエンドポイント (IP アドレスとポート番号) を設定
  namepass = ["telemetrys"]  # 出力するメトリクスを measurement 名 "telemetrys" にフィルタリング

  